return(p)
}
else
{
return(p)
}
}
fselect("Food Provided for","month")
fselect("Food Provided for","weekday")
fselect("Clothing Items","weekday")
UMD1
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
sum(!is.na(UMD2$`School Kits`))
sum(!is.na(UMD1$`School Kits`))
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
UMD1$Diapers
UMD1%>%select(Diapers)%>%drop_na(Diapers)
plot(UMD1%>%select(Diapers)%>%drop_na(Diapers))
UMD1%>%filter(Diapers>400)
UMD1%>%filter(Diapers>400)%>%select(Diapers)
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
help("sliderInput")
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
help(sliderInput)
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
clientname = as.data.frame(names(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[1:10]))
clientname
clientname = names(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[1:10])
clientname
clientdata = as.data.frame(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[1:10])
clientdata
clientname
clientname = as.numeric(names(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[1:10]))
clientname
clientname[4]
help(numericInput)
sort(table(UMD1$`Client File Number`),decreasing = TRUE)
length(sort(table(UMD1$`Client File Number`),decreasing = TRUE))
clientdata = as.data.frame(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[p])
sort(table(UMD1$`Client File Number`),decreasing = TRUE)[43]
as.data.frame(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[23])
as.numeric(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[23])
clientamount <- function(p)
{
clientname = as.numeric(names(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[p]))
clientfreq = as.numeric(sort(table(UMD1$`Client File Number`),decreasing = TRUE)[p])
return(c(clientname,clientfreq))
}
clientamount(1)
clientamount(5)
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
help(h3)
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>%drop_na(`Food Provided for`,`Food Pounds`,`Clothing Items`) %>%
filter(`Food Pounds` < 300)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%ggplot(aes(x = `Food Provided for`,y = `Food Pounds`))+geom_point()
UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>%drop_na(`Food Provided for`,`Food Pounds`,`Clothing Items`) %>%
filter(`Food Pounds` < 300)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%ggplot(aes(x = `Food Provided for`,y = `Food.Average`))+geom_point()
UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>%drop_na(`Food Provided for`,`Food Pounds`,`Clothing Items`) %>%
filter(`Food Pounds` < 300)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%ggplot(aes(x = `Food Provided for`,y = Food.Average))+geom_point()
UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>%drop_na(`Food Provided for`,`Food Pounds`,`Clothing Items`) %>%
filter(`Food Pounds` < 300)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%ggplot(aes(x = `Food Provided for`,y = Food.average))+geom_point()
UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>%drop_na(`Food Provided for`,`Food Pounds`,`Clothing Items`) %>%
filter(`Food Pounds` < 300)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%ggplot(aes(x = `Food Provided for`,y = Food.average))+geom_point()+geom_smooth()
Corr <- function(string1,string2,range)
{
UMD2 %>% select(Date,year,month,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>% filter(`Food Pounds` < 300, `Food Provided for` > 0)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>%ggplot(aes(x = get(string1),y = get(string2),group = month,col = month))+geom_point()+labs(x = string1, y = string2, title= "Scatterplot")+theme_bw()
}
library(tidyverse)
Sys.setlocale("LC_TIME", "English")
#This is for transforming the default language in function weekdays
UMD1 <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
UMD1$Date <- as.Date(UMD1$Date, "%m/%d/%Y")
#Data Preparation
#clear out the extraneous variable, clear the unmeaningful date and add "year","month","weekday" variable
UMD1 <- UMD1%>%filter(Date <= Sys.Date())%>%select(-Referrals,-`Field1`,-`Field2`,-`Field3`)%>%arrange(Date,`Client File Number`,`Client File Merge`)%>% mutate(year = as.numeric(format(Date,"%Y")))
UMD2 = UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,`School Kits`,`Diapers`,`Hygiene Kits`)%>%mutate(month = as.integer(format(Date,"%m")),weekday = weekdays(Date))
Corr <- function(string1,string2,range)
{
UMD2 %>% select(Date,year,month,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>% filter(`Food Pounds` < 300, `Food Provided for` > 0, year <= range[2], year >= range[1])%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>%ggplot(aes(x = get(string1),y = get(string2),group = month,col = month))+geom_point()+labs(x = string1, y = string2, title= "Scatterplot")+theme_bw()
}
Corr("Food Pounds","Food Provided for",2001,2018)
Corr("Food Pounds","Food Provided for",c(2001,2019))
Corr <- function(string1,string2,range)
{
UMD2 %>% select(Date,year,weekday,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>% filter(`Food Pounds` < 300, `Food Provided for` > 0, year <= range[2], year >= range[1])%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>%ggplot(aes(x = get(string1),y = get(string2),group = weekday,col = weekday))+geom_point()+labs(x = string1, y = string2, title= "Scatterplot")+theme_bw()
}
Corr("Food Pounds","Food Provided for",c(2001,2019))
quarters(UMD1$Date)
UMD2 = UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,`School Kits`,`Diapers`,`Hygiene Kits`)%>%mutate(month = as.integer(format(Date,"%m")),weekday = weekdays(Date),season = quarters(Date))
Corr <- function(string1,string2,range)
{
UMD2 %>% select(Date,year,weekday,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>% filter(`Food Pounds` < 300, `Food Provided for` > 0, year <= range[2], year >= range[1])%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>%ggplot(aes(x = get(string1),y = get(string2),group = quarters,col = quarters))+geom_point()+labs(x = string1, y = string2, title= "Scatterplot")+theme_bw()
}
Corr("Food Pounds","Food Provided for",c(2001,20195))
Corr("Food Pounds","Food Provided for",c(2001,2015))
Corr <- function(string1,string2,range)
{
UMD2 %>% select(Date,year,season,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`)%>% filter(`Food Pounds` < 300, `Food Provided for` > 0, year <= range[2], year >= range[1])%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>%ggplot(aes(x = get(string1),y = get(string2),group = season,col = season))+geom_point()+labs(x = string1, y = string2, title= "Scatterplot")+theme_bw()
}
Corr("Food Pounds","Food Provided for",c(2001,2015))
Corr("Food Pounds","Clothing Items",c(2001,2019))
Corr("Food Pounds","Food.Average",c(2001,2019))
Corr("Food Pounds","Food.average",c(2001,2019))
Corr("Food Provided for","Food.average",c(2001,2019))
shiny::runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
help(helpText)
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
help(geom_boxplot)
fselect <- function(column,timing,range)
{
Dat = UMD2%>%drop_na(column)
if(column == "Food Pounds")
{
Dat = Dat %>% filter(`Food Pounds` < 300)
}
if(column == "Food Provided for")
{
Dat = Dat %>% filter(`Food Provided for`< 100)
}
if(column == "Diapers")
{
Dat = Dat %>% filter(Diapers < 500)
}
Dat = Dat%>%filter(year >= range[1] & year <= range[2])%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
if(timing == "weekday")
{
Dat$`time unit` = as.double(ordered(Dat$`time unit`, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
p = ggplot(Dat,aes(x=`time unit`,y=y.column))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
}
if(timing == "month")
{
p = ggplot(Dat,aes(x=`time unit`,y=y.column))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_continuous(breaks = seq(0,12,3))
return(p)
}
if(timing == "year")
{
p = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+scale_x_continuous(breaks = seq(range[1],range[2],ceiling((range[2]-range[1])/4)))
return(p)
}
else
{
return(ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8) + theme_bw())
}
}
fselect("Food Pounds","month",c(2001,2016))
fselect <- function(column,timing,range)
{
Dat = UMD2%>%drop_na(column)
if(column == "Food Pounds")
{
Dat = Dat %>% filter(`Food Pounds` < 300)
}
if(column == "Food Provided for")
{
Dat = Dat %>% filter(`Food Provided for`< 100)
}
if(column == "Diapers")
{
Dat = Dat %>% filter(Diapers < 500)
}
Dat = Dat%>%filter(year >= range[1] & year <= range[2])%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
if(timing == "weekday")
{
Dat$`time unit` = as.double(ordered(Dat$`time unit`, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
p = ggplot(Dat,aes(x=`time unit`,y=y.column))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
}
if(timing == "month")
{
Dat$`time unit` = as.factor(Dat$`time unit`)
p = ggplot(Dat,aes(x=`time unit`,y=y.column,group = month))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_continuous(breaks = seq(0,12,3))
return(p)
}
if(timing == "year")
{
p = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+scale_x_continuous(breaks = seq(range[1],range[2],ceiling((range[2]-range[1])/4)))
return(p)
}
else
{
return(ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8) + theme_bw())
}
}
fselect("Food Pounds","month",c(2001,2016))
fselect <- function(column,timing,range)
{
Dat = UMD2%>%drop_na(column)
if(column == "Food Pounds")
{
Dat = Dat %>% filter(`Food Pounds` < 300)
}
if(column == "Food Provided for")
{
Dat = Dat %>% filter(`Food Provided for`< 100)
}
if(column == "Diapers")
{
Dat = Dat %>% filter(Diapers < 500)
}
Dat = Dat%>%filter(year >= range[1] & year <= range[2])%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
if(timing == "weekday")
{
Dat$`time unit` = as.double(ordered(Dat$`time unit`, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
p = ggplot(Dat,aes(x=`time unit`,y=y.column,group = `time unit`))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
}
if(timing == "month")
{
Dat$`time unit` = as.factor(Dat$`time unit`)
p = ggplot(Dat,aes(x=`time unit`,y=y.column,group = `time unit`))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_continuous(breaks = seq(0,12,3))
return(p)
}
if(timing == "year")
{
p = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+scale_x_continuous(breaks = seq(range[1],range[2],ceiling((range[2]-range[1])/4)))
return(p)
}
else
{
return(ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8) + theme_bw())
}
}
fselect("Food Pounds","month",c(2001,2016))
fselect <- function(column,timing,range)
{
Dat = UMD2%>%drop_na(column)
if(column == "Food Pounds")
{
Dat = Dat %>% filter(`Food Pounds` < 300)
}
if(column == "Food Provided for")
{
Dat = Dat %>% filter(`Food Provided for`< 100)
}
if(column == "Diapers")
{
Dat = Dat %>% filter(Diapers < 500)
}
Dat = Dat%>%filter(year >= range[1] & year <= range[2])%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
if(timing == "weekday")
{
Dat$`time unit` = as.double(ordered(Dat$`time unit`, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
p = ggplot(Dat,aes(x=`time unit`,y=y.column,group = `time unit`))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
}
if(timing == "month")
{
Dat$`time unit` = as.factor(Dat$`time unit`)
p = ggplot(Dat,aes(x=`time unit`,y=y.column,group = `time unit`))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
return(p)
}
if(timing == "year")
{
p = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+scale_x_continuous(breaks = seq(range[1],range[2],ceiling((range[2]-range[1])/4)))
return(p)
}
else
{
return(ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8) + theme_bw())
}
}
fselect("Food Pounds","month",c(2001,2016))
UMD2
fselect <- function(column,timing,range)
{
Dat = UMD2%>%drop_na(column)
if(column == "Food Pounds")
{
Dat = Dat %>% filter(`Food Pounds` < 300)
}
if(column == "Food Provided for")
{
Dat = Dat %>% filter(`Food Provided for`< 100)
}
if(column == "Diapers")
{
Dat = Dat %>% filter(Diapers < 500)
}
Dat = Dat%>%filter(year >= range[1] & year <= range[2])
if(timing == "weekday")
{
Dat$timing = as.double(ordered(Dat$timing, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
p = ggplot(Dat,aes(x=get(timing),y=y.column,group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
}
if(timing == "month")
{
Dat$timing = as.factor(Dat$timing)
p = ggplot(Dat,aes(x=get(timing),y=y.column,group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
return(p)
}
if(timing == "year")
{
Dat = Dat %>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
p = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+scale_x_continuous(breaks = seq(range[1],range[2],ceiling((range[2]-range[1])/4)))
return(p)
}
else
{
Dat = Dat%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
return(ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8) + theme_bw())
}
}
fselect("Food Pounds","month",c(2001,2016))
timing = "weekday"
Dat = UMD2%>%drop_na(column)
column = "Food Pounds"
Dat = UMD2%>%drop_na(column)
Dat = Dat %>% filter(`Food Pounds` < 300)
Dat$timing = as.double(ordered(Dat$timing, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
Dat$`timing` = as.double(ordered(Dat$`timing`, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
Dat
Dat$timing
timing
Dat$get(timing)
Dat$(get(timing))
Dat%>%select(timing)
Dat%>%select(timing) = as.double(ordered(Dat%>%select(timing), levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
Dat$"timing"
Dat[,timing]
Dat[,timing] = as.double(ordered(Dat[,timing], levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")))
Dat[,timing]
ggplot(Dat,aes(x=get(timing),y=y.column,group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
Dat = UMD2%>%drop_na(column)
Dat = Dat %>% filter(`Food Pounds` < 300)
column
ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
timing="month"
ggplot(Dat,aes(x=get(timing),y=y.column,group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
help("scale_x_discrete")
ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_discrete(seq(1,12))
ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_discrete(seq(1,12,1))
Dat[,timing] = as.factor(Dat[,timing])
Dat[,timing]
as.factor(Dat[,timing])
as.factor(format(Dat[,timing]))
ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_discrete(c(1,2,3,4,5,6,7,8,9,10,11,12))
ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_discrete(labels=c(1,2,3,4,5,6,7,8,9,10,11,12))
d <- ggplot(subset(diamonds, carat > 1), aes(cut, clarity)) +
geom_jitter())
d + scale_x_discrete("Cut")
d + scale_x_discrete("Cut", labels = c("Fair" = "F","Good" = "G",
"Very Good" = "VG","Perfect" = "P","Ideal" = "I"))
(d <- ggplot(subset(diamonds, carat > 1), aes(cut, clarity)) +
geom_jitter())
d + scale_x_discrete("Cut")
d + scale_x_discrete("Cut", labels = c("Fair" = "F","Good" = "G",
"Very Good" = "VG","Perfect" = "P","Ideal" = "I"))
p = ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_discrete(limits = c(1,2,3,4,5,6,7,8,9,10,11,12))
p
timing="weekday"
p = ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()+scale_x_discrete(limits = c(1,2,3,4,5,6,7,8,9,10,11,12))
p
ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend")+theme_bw()
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
fselect <- function(column,timing,range)
{
Dat = UMD2%>%drop_na(column)
if(column == "Food Pounds")
{
Dat = Dat %>% filter(`Food Pounds` < 300)
}
if(column == "Food Provided for")
{
Dat = Dat %>% filter(`Food Provided for`< 100)
}
if(column == "Diapers")
{
Dat = Dat %>% filter(Diapers < 500)
}
Dat = Dat%>%filter(year >= range[1] & year <= range[2])
if(timing == "weekday")
{
p = ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend boxplot")+theme_bw()
Dat = Dat %>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
Dat$'time unit' = as.double(ordered(Dat$`time unit`,level = c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")))
q = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+labs(x=timing,y=column,title="Changing Trend line chart")
return(list(p,q))
}
if(timing == "month")
{
p = ggplot(Dat,aes(x=get(timing),y=get(column),group = get(timing)))+geom_boxplot()+labs(x=timing,y=column,title="Changing Trend Boxplot")+theme_bw()+scale_x_discrete(limits = c(1,2,3,4,5,6,7,8,9,10,11,12))
Dat = Dat %>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
q = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+scale_x_continuous(breaks = seq(1,12,3))+labs(x=timing,y=column,title="Changing Trend line chart")
return(list(p,q))
}
if(timing == "year")
{
Dat = Dat %>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
p = ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8)+theme_bw()+scale_x_continuous(breaks = seq(range[1],range[2],ceiling((range[2]-range[1])/4)))+labs(x=timing,y=column,title="Changing Trend")
return(p)
}
else
{
Dat = Dat%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
return(ggplot(Dat,aes(x=`time unit`,y=y.column)) + geom_line(size = 0.8) + theme_bw()+labs(x=timing,y=column,title="Changing Trend"))
}
}
fselect("Food Pounds","month",c(1999,2010))
library(easyGgplot2)
install.packages("easyGgplot2")
ggpubr
library(ggpubr)
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
runApp('GitHub/bios611-projects-fall-2019-lcw68/project_2/scripts/Proj2')
rsconnect::setAccountInfo(name='lcw68',
token='BDB57AC4BCAA8A65F54B1246997B5CD9',
secret='C9MYkb+NPoIsuzH7+cXZoXcJg4swN6eBZMKrvqAX')
library(rsconnect)
getwd()
setwd("~/GitHub/bios611-projects-fall-2019-lcw68/project_2")
rsconnect::deployApp('~/GitHub/bios611-projects-fall-2019-lcw68/project_2/app.R')
rsconnect::deployApp('~/GitHub/bios611-projects-fall-2019-lcw68/project_2')
rsconnect::deployApp('~/GitHub/bios611-projects-fall-2019-lcw68/project_2')
rsconnect::deployApp('~/GitHub/bios611-projects-fall-2019-lcw68/project_2')
rsconnect::deployApp('~/GitHub/bios611-projects-fall-2019-lcw68/project_2')
runApp()
UMD2$Diapers
UMD2$drop_na(Diapers)
UMD2%>%drop_na(Diapers)
UMD2%>%drop_na(Diapers)[,diapers]
UMD2%>%drop_na(Diapers)[,Diapers]
UMD2%>%drop_na(Diapers)$>$select(Diapers)
UMD2%>%drop_na(Diapers)%>%select(Diapers)
sum(UMD2%>%drop_na(Diapers)%>%select(Diapers)>0)
plot(UMD2%>%drop_na(Diapers)%>%select(Diapers))
sum(UMD2%>%drop_na(Diapers)%>%select(Diapers)>3000)
which(sum(UMD2%>%drop_na(Diapers)%>%select(Diapers)>3000))
which(UMD2%>%drop_na(Diapers)%>%select(Diapers>3000))
which(UMD2%>%drop_na(Diapers)%>%select(Diapers)>3000)
UMD2%>%drop_na(Diapers)%>%select(Diapers)%>%filter(Diapers < 3000)%>% ggplot(aes(x=Date,y=Diapers))+geom_point()
UMD2%>%drop_na(Diapers)%>%select(Diapers)%>%filter(Diapers < 3000)%>% ggplot(aes(x=Diapers))+geom_histogram(stat = "identity")
hist(UMD2%>%drop_na(Diapers)%>%select(Diapers)%>%filter(Diapers < 3000))
UMD2%>%drop_na(Diapers)%>%select(Diapers)%>%filter(Diapers < 3000)
tp =as.vector(UMD2%>%drop_na(Diapers)%>%select(Diapers)%>%filter(Diapers < 3000))
tp
hist(tp)
tp =as.numeric(UMD2%>%drop_na(Diapers)%>%select(Diapers)%>%filter(Diapers < 3000))
tp =as.data.frame(UMD2%>%drop_na(Diapers)%>%select(Diapers)%>%filter(Diapers < 3000))
tp
hist(tp)
hist(x=tp)
plot(tp)
as.vector(tp)
dim(tp)
hist(tp[,1])
UMD2%>%drop_na(`Food Pounds`)%>%select(`Food Pounds`)%>%filter(`Food Pounds` < 300)
UMD2%>%drop_na(`Food Pounds`)%>%select(`Food Pounds`)%>%filter(`Food Pounds` > 300)
tp=UMD2%>%drop_na(`Food Pounds`)%>%select(`Food Pounds`)%>%filter(`Food Pounds` < 1000)
hist(tp[,1])
tp
tp=as.data.frame(tp)
hist(tp[,1])
runApp()
sum(UMD1$`Food Provided for`>0)
sum(UMD1$`Food Provided for`<=0)
(UMD1$`Food Provided for`<=0)
sum(UMD1$`Food Provided for`<=0)
runApp()
string1 = "Food Provided for"
string2 = "Food Pounds"
range = c(1999,2019)
UMD2 %>% select(Date,year,season,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,Diapers)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>% filter(`Food Pounds` < 1000, `Food Provided for` > 0, Diapers < 1000,year <= range[2], year >= range[1])%>%ggplot(aes(x = get(string1),y = get(string2),group = season,col = season))+geom_point()+labs(x = string1, y = string2, title= "Scatterplot")+theme_bw()
range = c(1949,2019)
UMD2 %>% select(Date,year,season,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,Diapers)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>% filter(`Food Pounds` < 1000, `Food Provided for` > 0, Diapers < 1000,year <= range[2], year >= range[1])%>%ggplot(aes(x = get(string1),y = get(string2),group = season,col = season))+geom_point()+labs(x = string1, y = string2, title= "Scatterplot")+theme_bw()
UMD2 %>% select(Date,year,season,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,Diapers)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>% filter(`Food Pounds` < 1000, `Food Provided for` > 0, Diapers < 1000,year <= range[2], year >= range[1])
UMD2 = UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,`School Kits`,`Diapers`,`Hygiene Kits`)%>%mutate(month = as.integer(format(Date,"%m")),weekday = weekdays(Date),season = quarters(Date))
UMD2 = UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,`School Kits`,`Diapers`,`Hygiene Kits`)%>%mutate(month = as.integer(format(Date,"%m")),weekday = weekdays(Date),season = quarters(Date))
UMD2 %>% select(Date,year,season,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,Diapers)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>% filter(`Food Pounds` < 1000, `Food Provided for` > 0, Diapers < 1000,year <= range[2], year >= range[1])
UMD2 %>% select(Date,year,season,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,Diapers)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>% filter(`Food Pounds` < 1000,  Diapers < 1000,year <= range[2], year >= range[1])
UMD2 %>% select(Date,year,season,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,Diapers)%>% mutate(Food.average = `Food Pounds`/`Food Provided for`)%>%
drop_na(string1,string2)%>% filter(`Food Pounds` < 1000, year <= range[2], year >= range[1])
sum(UMD2$Diapers>1000)
(UMD2$Diapers>1000)
runApp()
runApp()
rsconnect::deployApp('~/GitHub/bios611-projects-fall-2019-lcw68/project_2')
