summarise(count =n(),cloth.ave = mean(`Clothing Items`),diaper.ave = mean(Diapers))
ggplot(tmp)+geom_line(aes(x=month,y=cloth.ave,col="cloth.ave"),size = 1.2)+
geom_line(aes(x=month,y=diaper.ave,col="diaper.ave"),size = 1.2)+scale_color_manual(values = c("red", "blue"))+
labs(x="month",y="item",title = "Demand change by month")+scale_x_continuous(breaks = seq(0,12,3))+theme_bw()
A1=UMD1%>%filter(`Client File Number`==3502)
table(A1$year)
Table6_12<-array(c(7,55,31,269,7,20,18,112,7,33,24,114,40,88,45,172,
34,50,24,55,27,55,24,58,30,34,17,17),
dim=c(2,2,7),
dimnames=list(CupsCoffee=c("GE5","LT5"),MIcase=c("Yes","No"),
Smoking=c("Never","Former","1-14","15-24","25-34","35-44","45+")))
Table6_12
Table6_12[1]
Table6_12[[1]]
Table6_12[1,]
dim(Table6_12)
Table6_12[1,1,]
sum(Table6_12[1,1,])
A = matrix(0,2,2)
A
A = matrix(0,2,2)
A[1,1] = sum(Table6_12[1,1,])
A[1,2] = sum(Table6_12[1,2,])
A[2,1] = sum(Table6_12[2,1,])
A[2,2] = sum(Table6_12[2,2,])
A
or1 = A[1,1]*A[2,2]/A[2,1]*A[1,2]
or1
A
or1 = A[1,1]*A[2,2]/A[2,1]/A[1,2]
or1
library(epitools)
oddsratio.wald(A)
35*79/52/53
Table6_12[1,1,]*Table6_12[2,2,]
N = 0
for(i in 1:7)
{
N[i] = sum(table6_12[4*i-3:4*i])
}
N = 0
for(i in 1:7)
{
N[i] = sum(Table6_12[4*i-3:4*i])
}
N
N = 0
for(i in 1:7)
{
N[i] = sum(Table6_12[(4*i-3):4*i])
}
N
Table6_12[28]
Table6_12[25:28]
sum(Table6_12[25:28])
N = 0
for(i in 1:7)
{
N[i] = sum(Table6_12[(4*i-3):(4*i)])
}
N
sum(Table6_12[1,1,]*Table6_12[2,2,]/N)
Table6_12[1,1,]*Table6_12[2,2,]/N
30*17/98
sum(Table6_12[1,1,]*Table6_12[2,2,]/N)/sum(Table6_12[1,2,]*Table6_12[2,1,]/N)
mantelhaen.test(Table6_12)
log(Table6_12[1,1,]*Table6_12[2,2,]/(Table6_12[1,2,]*Table6_12[2,1,]))
library(shiny)
runExample("01_hello")
install.packages(“rsconnect”)
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo()
library(shiny)
library(tidyverse)
city_df = read_csv(url("https://gist.githubusercontent.com/Miserlou/11500b2345d3fe850c92/raw/e36859a9eef58c231865429ade1c142a2b75f16e/gistfile1.txt"), skip=3)
ui <- fluidPage(
# App title ----
titlePanel("US Cities Dashboard"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Integer for the number of bins ----
numericInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram and table----
plotOutput(outputId = "popPlot"),
dataTableOutput(outputId = "popTable")
)
)
)
server <- function(input, output) {
# renderPlot creates histogram and links to ui
output$popPlot <- renderPlot({
bins = seq(min(city_df$population, na.rm = T),
max(city_df$population, na.rm = T),
length.out = input$bins + 1)
ggplot(city_df, aes(x=population)) +
geom_histogram(breaks = bins) +
labs(x = "Population size",
title = "Histogram of US city populations") +
scale_y_log10()
})
# Data table output, linked to ui
output$popTable <- renderDataTable({city_df})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(name='lcw68',
token='BDB57AC4BCAA8A65F54B1246997B5CD9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lcw68',
token='BDB57AC4BCAA8A65F54B1246997B5CD9',
secret='<SECRET>')
ui <- fluidPage(
# App title ----
titlePanel("US Cities Dashboard"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Integer for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram and table----
plotOutput(outputId = "popPlot"),
dataTableOutput(outputId = "popTable")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# renderPlot creates histogram and links to ui
output$popPlot <- renderPlot({
bins = seq(min(city_df$population, na.rm = T),
max(city_df$population, na.rm = T),
length.out = input$bins + 1)
ggplot(city_df, aes(x=population)) +
geom_histogram(breaks = bins) +
labs(x = "Population size",
title = "Histogram of US city populations") +
scale_y_log10()
})
# Data table output, linked to ui
output$popTable <- renderDataTable({city_df})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# App title ----
titlePanel("US Cities Dashboard"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Integer for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram and table----
plotOutput(outputId = "popPlot"),
dataTableOutput(outputId = "popTable")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# renderPlot creates histogram and links to ui
output$popPlot <- renderPlot({
bins = seq(min(city_df$population, na.rm = T),
max(city_df$population, na.rm = T),
length.out = input$bins + 1)
ggplot(city_df, aes(x=population)) +
geom_histogram(breaks = bins) +
labs(x = "Population size",
title = "Histogram of US city populations") +
scale_y_log10()
})
# Data table output, linked to ui
output$popTable <- renderDataTable({city_df})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='lcw68',
token='BDB57AC4BCAA8A65F54B1246997B5CD9',
secret='C9MYkb+NPoIsuzH7+cXZoXcJg4swN6eBZMKrvqAX')
rsconnect::deployApp('path/to/your/app')
runApp('GitHub/datasci611/scripts/city_shiny_app.R')
sids.death = c(22, 23, 22, 15, 21, 15, 17, 18, 19, 14, 24, 20)
lambda.est = mean(sids.death)
T = sum(sids.death - lambda.est)^2/lambda.est
lambda.est
pchisq(T,11)
qchisq(T,11)
T
(sids.death - lambda.est)^2
T = sum((sids.death - lambda.est)^2)/lambda.est
T
pchisq(T,11)
pchisq(1000,11)
pchisq(0,11)
pchisq(0.5,11)
pchisq(3,11)
pchisq(6,11)
pchisq(100,11)
pchisq(10,11)
pchisq(14,11)
qchisq(0,11)
qchisq(1,11)
qchisq(0.98,11)
qchisq(0.998,11)
qchisq(0.99999,11)
qchisq(0.9999999999999,11)
qchisq(0.999999999999999999,11)
qchisq(0.99999999999999999,11)
qchisq(0.9999999999999999,11)
1- pchisq(T,11)
lambda
lambda.est
sum(sids.death)
pchisq(0.025,460)
dchisq(0.025,852)
pchisq(0.025,852)
qchisq(0.025,852)
qchisq(0.025,852)/2
qchisq(0.025,460)
qchisq(0.025,460)/2
c(qchisq(0.025,sum(sids.death))/2,qchisq(0.975,sum(sids.death))/2)
c(qchisq(0.025,sum(sids.death))/2,qchisq(0.975,sum(sids.death))/2)/12
lambda.est
lambda.est = mean(sids.death)
lambda.est
sum(sids.death)
c(qchisq(0.025,2*sum(sids.death))/2,qchisq(0.975,2*sum(sids.death))/2)
c(qchisq(0.025,2*sum(sids.death))/2,qchisq(0.975,2*sum(sids.death))/2)/12
Table6_12
matrix(c(41,48,50,40,63,27),byrow=TRUE,colnames = c("19-24","25-29","30+"),rownames = c("Continuers","Terminators"))
matrix(c(41,48,50,40,63,27),byrow=TRUE,colname = c("19-24","25-29","30+"),rowname = c("Continuers","Terminators"))
matrix(c(41,48,50,40,63,27),byrow=TRUE,colnames <- c("19-24","25-29","30+"),rownames <- c("Continuers","Terminators"))
matrix(c(41,48,50,40,63,27),byrow=TRUE,nrow=3,colnames <- c("19-24","25-29","30+"),rownames <- c("Continuers","Terminators"))
matrix(c(41,48,50,40,63,27),byrow=TRUE,nrow=3,rownames <- c("19-24","25-29","30+"),colnames <- c("Continuers","Terminators"))
matrix(c(41,48,50,40,63,27),byrow=TRUE,nrow=3)
S <- matrix(c(41,48,50,40,63,27),byrow=TRUE,nrow=3)
rownames(S) <- c("19-24","25-29","30+")
colnames(S) <- c("Continuers","Terminators")
S
E = matrix(0,ncol=2,nrow=3)
for(i in 1:3)
{
for(j in 1:2)
{
E[i,j] = sum(S[i,])*sum(S[,j])/sum(S)
}
}
E
sum((S-E)^2/E)
(S-E)^2/E
(S-E)^2
sum(S)
S
E
S-E
qchisq(0.95,2)
sum((S-E)^2/E)
1-pchisq(sum((S-E)^2/E),2)
devtools::install_github('shenorrlab/bseq-sc')
devtools::install_github('shenorrlab/bseq-sc',force = TRUE)
library(bseqsc)
583 +145+ 86 +182
583+139+524
S
S <- matrix(c(41,48,50,40,63,27),byrow=TRUE,nrow=3)
rownames(S) <- c("19-24","25-29","30+")
colnames(S) <- c("Continuers","Terminators")
S
cbind(S,c(sum(S[1,]),sum(S[2,])))
cbind(S,c(sum(S[1,]),sum(S[2,]),sum(S[3,])))
S <- cbind(S,c(sum(S[1,]),sum(S[2,]),sum(S[3,])))
S
S <- rbind(S,c(sum(S[,1]),sum(S[,2]),sum(S[,3])))
S
S <- matrix(c(41,48,50,40,63,27),byrow=TRUE,nrow=3)
S <- cbind(S,c(sum(S[1,]),sum(S[2,]),sum(S[3,])))
S <- rbind(S,c(sum(S[,1]),sum(S[,2]),sum(S[,3])))
rownames(S) <- c("19-24","25-29","30+","rowsum")
colnames(S) <- c("Continuers","Terminators","colsum")
S
S[1,3]*S[4,2]/S[4,3]
S[1,3]*S[4,1]/S[4,3]
for(i in 1:3)
{
for(j in 1:2)
{
E[i,j] = sum(S[i,])*sum(S[,j])/sum(S)
}
}
E = matrix(0,3,2)
for(i in 1:3)
{
for(j in 1:2)
{
E[i,j] = sum(S[i,])*sum(S[,j])/sum(S)
}
}
(S[1,1]-E[1,1])/(sqrt(E[1,1]*(1-89/269)*(1-154/269)))
N0 = S[4,3]
(S[1,3]-E[1,3])/sqrt(E(1,3)*(1-S[3,3]/N0)*(1-S[1,4]/N0))
S
E
(S[3,1]-E[3,1])/sqrt(E(3,1)*(1-S[3,3]/N0)*(1-S[1,4]/N0))
(S[3,1]-E[3,1])/sqrt(E[3,1]*(1-S[3,3]/N0)*(1-S[1,4]/N0))
S
(S[3,1]-E[3,1])/sqrt(E[3,1]*(1-S[3,3]/N0)*(1-S[4,1]/N0))
E
(S[3,2]-E[3,2])/sqrt(E[3,2]*(1-S[3,3]/N0)*(1-S[4,2]/N0))
(S[2,1]-E[2,1])/sqrt(E[2,1]*(1-S[2,3]/N0)*(1-S[4,1]/N0))
pnorm(2.61)
pnorm(10.56)
qnorm(3*10^(-22))
1-pnorm(2.61)
(1-pnorm(2.61))*2
(S[3,1]-E[3,1])/sqrt(E[3,1]*(1-S[3,3]/N0)*(1-S[4,1]/N0))
2*(1-pnorm(2.997476))
1-pnorm(0.4)
41/154
c(S[2,1]/S[2,3],S[2,2]/S[2,3])
matrix(c(59,53,39,34,57,28),byrow = TRUE, ncol =2)
apply(1:3,matrix(c(59,53,39,34,57,28),byrow = TRUE, ncol =2),rowsum)
rowsum(matrix(c(59,53,39,34,57,28),byrow = TRUE, ncol =2))
help(rowsum)
rowSums(matrix(c(59,53,39,34,57,28),byrow = TRUE, ncol =2))
S2 = matrix(c(59,53,39,34,57,28),byrow = TRUE, ncol =2)
S2 = cbind(S2,rowSums(S2))
S2 = rbind(S2,colSums(S2))
S2
rownames(S2) <- c("1-2","3-4","5+","rowsum")
colnames(S2) <- c("Continuers","Terminators","colsum")
S2
(S2[3,1]-S2[3,3]*S2[4,1]/S2[4,3])/sqrt(S2[3,3]*S2[4,1]/S2[4,3]*(1-S2[3,3]/S2[4,3])*(1-S2[4,1]/S2[4,3]))
(S2[3,2]-S2[3,3]*S2[4,2]/S2[4,3])/sqrt(S2[3,3]*S2[4,2]/S2[4,3]*(1-S2[3,3]/S2[4,3])*(1-S2[4,2]/S2[4,3]))
53/270
1-pchisq(4.74,2)
S
library(tidyverse)
library(ggplot2)
library(reshape2)
UMD1 <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
UMD1$Date <- as.Date(UMD1$Date, "%m/%d/%Y")
#clear out the extraneous variable, clear the unmeaningful date and add "year" variable
UMD1 <- UMD1%>%filter(Date <= Sys.Date())%>%select(-Referrals,-`Field1`,-`Field2`,-`Field3`)%>%arrange(Date,`Client File Number`,`Client File Merge`)%>% mutate(year = as.numeric(format(Date,"%Y")))
UMD2 = UMD1 %>% select(Date,year,`Client File Number`,`Food Provided for`,`Food Pounds`,`Clothing Items`,`School Kits`)%>% filter(year >= 1999,`Food Pounds` < 300,`Food Provided for`< 50)%>%mutate(month = as.integer(format(Date,"%m")))
UMD2
setwd("~/GitHub/bios611-projects-fall-2019-lcw68/project_2")
library(shiny)
library(shinydashboard)
source("helper_functions.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = "var",
label = "Choose a variable to be x-axis",
choices = c("Food Provided for","Food Pounds","Clothing Items","School Kits"),
selected = "Food Provided for"),
slectInput(inputId = "time",
label = "Choose a variable to be group based",
choices = c("year","Month","Date"),
selected = "year"),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "TrendPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$TrendPlot <- renderPlot({
name = input$var
unit = input$time
fselect(name,unit)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('scripts/Proj2')
runApp('scripts/Proj2')
runApp('scripts/Proj2')
UMD2
column = "Clothing Items"
UMD2%>%drop_na(column)%>%group_by(time)%>%summarise(y.column = mean(get(column)))
UMD2%>%drop_na(column)%>%group_by("month")%>%summarise(y.column = mean(get(column)))
UMD2%>%drop_na("Clothing Items")%>%group_by("month")%>%summarise(y.column = mean("Clothing Items"))
UMD2%>%drop_na(`Clothing Items`)%>%group_by(`month`)%>%summarise(y.column = mean(`Clothing Items`))
fselect <- function(column,time)
{
Dat = UMD2%>%drop_na(column)%>%group_by(time)%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(time),y=y.column))+geom_line()+labs(x=time,y=column,title="Changing Trend")
}
feslect("Clothing Items","Date")
fselect("Clothing Items","Date")
UMD2%>%drop_na(`Clothing Items`)%>%group_by(`Date`)%>%summarise(y.column = mean(`Clothing Items`))
fselect <- function(column,time)
{
Dat = UMD2%>%drop_na(column)%>%group_by(get(time))%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(time),y=y.column))+geom_line()+labs(x=time,y=column,title="Changing Trend")
}
fselect("Clothing Items","Date")
fselect <- function(column,time)
{
Dat = UMD2%>%drop_na(column)%>%group_by(time)%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(time),y=y.column))+geom_line()+labs(x=time,y=column,title="Changing Trend")
}
fselect("Clothing Items","month")
fselect("Clothing Items",month)
fselect <- function(column,timing)
{
Dat = UMD2%>%drop_na(column)%>%group_by(timing)%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(timing),y=y.column))+geom_line()+labs(x=timing,y=column,title="Changing Trend")
}
fselect("Clothing Items","month")
v = "Date"
column = "Clothing Items"
UMD2%>%drop_na(column)%>%group_by(v)%>%summarise(y.column = mean(get(column)))
v
UMD2%>%drop_na(column)%>%group_by(get(v))%>%summarise(y.column = mean(get(column)))
fselect <- function(column,timing)
{
Dat = UMD2%>%drop_na(column)%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(timing),y=y.column))+geom_line()+labs(x=timing,y=column,title="Changing Trend")
}
fselect("Clothing Items","month")
fselect("Clothing Items","Date")
UMD2%>%drop_na(column)%>%group_by(get("month"))%>%summarise(y.column = mean(get(column)))
fselect <- function(column,timing)
{
Dat = UMD2%>%drop_na(column)%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(timing),y=y.column))+geom_line()+labs(x=timing,y=column,title="Changing Trend")
}
fselect("Food Pounds",month)
fselect("Food Pounds","year")
fselect("Food Pounds","Date")
fselect("Food Pounds",Date)
fselect("Food Pounds",`Date`)
Dat = UMD2%>%drop_na(column)%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(timing),y=y.column))+geom_line()+labs(x=timing,y=column,title="Changing Trend")
timing = "Date"
Dat = UMD2%>%drop_na(column)%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(timing),y=y.column))+geom_line()+labs(x=timing,y=column,title="Changing Trend")
v
Dat = UMD2%>%drop_na(column)%>%group_by(get(v))%>%summarise(y.column = mean(get(column)))
ggplot(Dat,aes(x=get(v),y=y.column))+geom_line()+labs(x=v,y=column,title="Changing Trend")
UMD2%>%drop_na(column)%>%group_by(get(v))%>%summarise(y.column = mean(get(column)))
up=UMD2%>%drop_na(column)%>%group_by(get(v))%>%summarise(y.column = mean(get(column)))
ggplot(up,aes(x=get(v),y=y.column))+geom_line()+labs(x=v,y=column,title="Changing Trend")
ggplot(up,aes(x=v,y=y.column))+geom_line()+labs(x=v,y=column,title="Changing Trend")
up
up=UMD2%>%drop_na(column)%>%group_by(get(v))%>%summarise(y.column = mean(get(column)))%>%rename("xaixs" = "get(v)")
up
fselect <- function(column,timing)
{
Dat = UMD2%>%drop_na(column)%>%group_by(get(timing))%>%summarise(y.column = mean(get(column)))%>%rename("time unit" = "get(timing)")
ggplot(Dat,aes(x=`time unit`,y=y.column))+geom_line()+labs(x=timing,y=column,title="Changing Trend")
}
fselect("Clothing Items","month")
fselect("Clothing Items","year")
fselect("Clothing Items","Date")
runApp('scripts/Proj2')
UMD1
runApp('scripts/Proj2')
runApp('scripts/Proj2')
help(numericInput)
sort(table(UMD1$`Client File Number`),decreasing = TRUE)[1:10]
UMD1%>%arrange(`Client File Number`,decreasing = TRUE)
help("arrange")
UMD1%>%arrange(desc(`Client File Number`))
A = sort(table(UMD1$`Client File Number`),decreasing = TRUE)[1:10]
A
A[1]
A[1]+1
A$freq
A$Freq
A[1,]
dim(A)
table(UMD1$`Client File Number`)
sort(table(UMD1$`Client File Number`),decreasing = TRUE)
